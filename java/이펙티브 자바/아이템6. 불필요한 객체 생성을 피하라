# Overview

이펙티브 자바 **아이템6. 불필요한 객체 생성을 피하라**를 보고 공부한 내용을 정리했다.

똑같은 기능의 객체를 매번 생성하기보다 객체 하나를 재사용하는 것이 (대부분) 좋다.

더욱이 불변객체는 항상 재사용할 수 있다.

# 문자열 객체

자바 문자열인 String을 new로 생성하면 항상 heap 메모리에 새로운 객체를 생성한다.

같은 내용의 문자열을 재사용하기 위해서는 다음과 같이 String 객체를 생성하는 것이 옳다.

```java
String str = "apple";
```

해당 자바 가상 머신의 String Pool에 동일한 문자열이 존재한다면 재사용 하게 된다.

# static 팩토리 메소드 사용

[아이템 1](https://github.com/dolgodolah/TIL/blob/master/java/%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%20%EC%9E%90%EB%B0%94/%EC%95%84%EC%9D%B4%ED%85%9C1.%20%EC%83%9D%EC%84%B1%EC%9E%90%20%EB%8C%80%EC%8B%A0%20%EC%A0%95%EC%A0%81%20%ED%8C%A9%ED%86%A0%EB%A6%AC%20%EB%A9%94%EC%86%8C%EB%93%9C%EB%A5%BC%20%EA%B3%A0%EB%A0%A4%ED%95%98%EB%9D%BC.md)에서 언급했던 내용과 같다. 생성자는 반드시 새로운 객체를 만들지만

static 팩토리 메소드는 클래스 로딩 시점에 생성된 하나의 객체를 재사용하게 된다.

# 비싼 객체

생성 비용이 비싼 객체를 반복적으로 만들어야 한다면 캐시해두고 재사용하는 것이 좋다.

문자열이 로마 숫자를 표현하는지 확인하는 정규 표현식을 통해 예제를 살펴보자.

```java
static boolean isRomanNumeral(String s) {
    return s.matches("^(?=.)M*(C[MD]|D?C{0,3})(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$");
}
```

`String.matches`는 해당 문자열이 정규 표현식에 매치가 되는지 확인하는 가장 간단한 방법이지만

`String.matches` 내부적으로 `Pattern`이라는 비싼 객체를 만들어 쓴다.

성능을 개선하기 위해서는 `Pattern` 객체를 만들어 재사용하는 것이 좋다.

```java
private static final Pattern ROMAN = Pattern.compile("^(?=.)M*(C[MD]|D?C{0,3})(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$");

static boolean isRomanNumeral(String s) {
    return ROMAN.matchers(s).matches(); 
}
```

# 어댑터

불변 객체인 경우 객체를 재사용해야하는 게 명확하지만 몇몇 경우 불분명한 경우가 있다.

어댑터는 인터페이스를 통해서 뒤에 있는 객체로 연결해주는 객체라 여러 개 만들 필요가 없다.

`Map` 인터페이스가 제공하는 `KeySet`은 `Map` 뒤에 있는 `Set` 인터페이스의 뷰를 제공한다.

```java
Map<String, Integer> menu = new HashMap<>();
menu.put("Burger", 8);
menu.put("Pizza", 9);

Set<String> menuName1 = menu.keySet();
Set<String> menuName2 = menu.keySet();

menuName1.remove("Burger");
System.out.println(menuName1.size()); // 1
System.out.println(menu.size()); // 1
```

`keySet`을 할 때마다 새로운 객체가 나올거 같지만 같은 객체를 반환하기 때문에 `menuName1`과 `menuName2`는 같은 객체이다.

둘 중 하나를 변경하게 되면 `Set` 앞에 있는 `Map` 객체를 변경하게 된다.

# 오토박싱

오토박싱 또한 불필요한 객체를 생성하게 될 수 있다.

```java
Long sum = 0l;
for (long i = 0; i <= Integer.MAX_VALUE; i++) {
    sum += i;    
}
```

`sum`의 타입이 `Long`이기 때문에 불필요한 Long 객체를 2^31만큼 생성하게 된다.

이를 원시타입으로 바꾸면 약 10배 이상 빨라진다고 한다.

즉, 불필요한 오토박싱을 피하려면 박스 타입보다는 원시타입을 사용해야 한다.
